version: '3.8'

services:
  # Borgia main application
  borgia:
    build: .
    container_name: borgia-app
    ports:
      - "8000:8000"  # API port
      - "9090:9090"  # Metrics port
    environment:
      - DATABASE_URL=postgresql://borgia:password@postgres:5432/borgia
      - REDIS_URL=redis://redis:6379
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - DEVELOPMENT_MODE=true
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./results:/app/results
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - borgia-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: borgia-postgres
    environment:
      - POSTGRES_DB=borgia
      - POSTGRES_USER=borgia
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U borgia -d borgia"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - borgia-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: borgia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - borgia-network

  # Jupyter notebook for development
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: borgia-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=borgia-dev
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./models:/app/models
      - ./results:/app/results
    depends_on:
      - borgia
    networks:
      - borgia-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: borgia-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - borgia-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: borgia-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - borgia-network

  # MLflow for experiment tracking
  mlflow:
    image: python:3.11-slim
    container_name: borgia-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://borgia:password@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=file:///app/mlruns
    volumes:
      - mlflow_data:/app/mlruns
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server 
        --backend-store-uri postgresql://borgia:password@postgres:5432/mlflow
        --default-artifact-root file:///app/mlruns
        --host 0.0.0.0
        --port 5000
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - borgia-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  mlflow_data:
    driver: local

networks:
  borgia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 